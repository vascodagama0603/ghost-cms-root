import { Collection } from './Collection';
import { CollectionRepository } from './CollectionRepository';
type CollectionsServiceDeps = {
    collectionsRepository: CollectionRepository;
};
type CollectionPostDTO = {
    id: string;
    sort_order: number;
};
type ManualCollection = {
    title: string;
    type: 'manual';
    slug?: string;
    description?: string;
    feature_image?: string;
    filter?: null;
};
type AutomaticCollection = {
    title: string;
    type: 'automatic';
    filter: string;
    slug?: string;
    description?: string;
    feature_image?: string;
};
type CollectionInputDTO = ManualCollection | AutomaticCollection;
type CollectionDTO = {
    id: string;
    title: string | null;
    slug: string;
    description: string | null;
    feature_image: string | null;
    type: 'manual' | 'automatic';
    filter: string | null;
    created_at: Date;
    updated_at: Date | null;
    posts: CollectionPostDTO[];
};
type CollectionPostInputDTO = {
    id: string;
    featured: boolean;
    published_at: Date;
};
export declare class CollectionsService {
    collectionsRepository: CollectionRepository;
    constructor(deps: CollectionsServiceDeps);
    toDTO(collection: Collection): CollectionDTO;
    fromDTO(data: any): any;
    createCollection(data: CollectionInputDTO): Promise<CollectionDTO>;
    addPostToCollection(collectionId: string, post: CollectionPostInputDTO): Promise<CollectionDTO | null>;
    edit(data: any): Promise<CollectionDTO | null>;
    getById(id: string): Promise<Collection | null>;
    getAll(options?: any): Promise<{
        data: Collection[];
        meta: any;
    }>;
    destroy(id: string): Promise<Collection | null>;
    removePostFromCollection(id: string, postId: string): Promise<CollectionDTO | null>;
}
export {};
