"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Collection = void 0;
const errors_1 = require("@tryghost/errors");
const tpl_1 = __importDefault(require("@tryghost/tpl"));
const bson_objectid_1 = __importDefault(require("bson-objectid"));
const messages = {
    invalidIDProvided: 'Invalid ID provided for Collection',
    invalidDateProvided: 'Invalid date provided for {fieldName}'
};
class Collection {
    id;
    title;
    slug;
    description;
    type;
    filter;
    featureImage;
    createdAt;
    updatedAt;
    deleted;
    _posts;
    get posts() {
        return this._posts;
    }
    /**
     * @param post {{id: string}} - The post to add to the collection
     * @param index {number} - The index to insert the post at, use negative numbers to count from the end.
     */
    addPost(post, index = -0) {
        // if (this.type === 'automatic') {
        //     TODO: Test the post against the NQL filter stored in `this.filter`
        //     This will need the `post` param to include more data.
        // }
        if (this.posts.includes(post.id)) {
            this._posts = this.posts.filter(id => id !== post.id);
        }
        if (index < 0 || Object.is(index, -0)) {
            index = this.posts.length + index;
        }
        this.posts.splice(index, 0, post.id);
    }
    removePost(id) {
        if (this.posts.includes(id)) {
            this._posts = this.posts.filter(postId => postId !== id);
        }
    }
    constructor(data) {
        this.id = data.id;
        this.title = data.title;
        this.slug = data.slug;
        this.description = data.description;
        this.type = data.type;
        this.filter = data.filter;
        this.featureImage = data.featureImage;
        this.createdAt = data.createdAt;
        this.updatedAt = data.updatedAt;
        this.deleted = data.deleted;
        this._posts = data.posts;
    }
    toJSON() {
        return {
            id: this.id,
            title: this.title,
            slug: this.slug,
            description: this.description,
            type: this.type,
            filter: this.filter,
            featureImage: this.featureImage,
            createdAt: this.createdAt,
            updatedAt: this.updatedAt,
            posts: this.posts
        };
    }
    static validateDateField(date, fieldName) {
        if (!date) {
            return new Date();
        }
        if (date instanceof Date) {
            return date;
        }
        throw new errors_1.ValidationError({
            message: (0, tpl_1.default)(messages.invalidDateProvided, { fieldName })
        });
    }
    static async create(data) {
        let id;
        if (!data.id) {
            id = new bson_objectid_1.default();
        }
        else if (typeof data.id === 'string') {
            id = bson_objectid_1.default.createFromHexString(data.id);
        }
        else if (data.id instanceof bson_objectid_1.default) {
            id = data.id;
        }
        else {
            throw new errors_1.ValidationError({
                message: (0, tpl_1.default)(messages.invalidIDProvided)
            });
        }
        return new Collection({
            id: id.toHexString(),
            title: data.title,
            description: data.description || null,
            type: data.type || 'manual',
            filter: data.filter || null,
            featureImage: data.feature_image || null,
            createdAt: Collection.validateDateField(data.created_at, 'created_at'),
            updatedAt: Collection.validateDateField(data.updated_at, 'updated_at'),
            deleted: data.deleted || false,
            posts: data.posts || []
        });
    }
}
exports.Collection = Collection;
